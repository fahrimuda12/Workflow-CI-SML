name: CI/CD MLflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CSV_URL: "MLProject/dataset/failure_heart_preprocessing.csv"
  TARGET_VAR: "HeartDisease"
  EXPERIMENT_NAME: "CI/CD Heart Disease Model"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
      DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
      MLFLOW_TRACKING_URI: "https://dagshub.com/fahrimuda12/heart-disease.mlflow"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: 3.9
          activate-environment: heart_disease_env
      
      - name: Install MLflow
        shell: bash -l {0}
        run: |
          conda activate heart_disease_env
          pip install mlflow
      
      - name: Verify installation
        shell: bash -l {0}
        run: |
          conda activate heart_disease_env
          mlflow --version
          python --version
      
      - name: Export env
        run: |
          echo "MLFLOW_TRACKING_URI=https://dagshub.com/fahrimuda12/heart-disease.mlflow" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_TOKEN=${{ secrets.DAGSHUB_TOKEN }}" >> $GITHUB_ENV
          echo "DAGSHUB_TOKEN=${{ secrets.DAGSHUB_TOKEN }}" >> $GITHUB_ENV
          echo "DAGSHUB_USERNAME=${{ secrets.DAGSHUB_USERNAME }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=${{ secrets.DAGSHUB_USERNAME }}" >> $GITHUB_ENV

      - name: Run MLflow Project
        shell: bash -l {0}
        run: |
          conda activate heart_disease_env
          cd MLProject 
          mlflow run . --experiment-name "model_heart_disease_failure"
      
      - name: List generated artifacts
        shell: bash -l {0}
        run: |
          echo "Generated files:"
          find MLProject/ -name "*.pkl" -o -name "*.joblib" -o -name "model_heart_disease_failure" | head -20
      
      - name: Show MLflow runs
        shell: bash -l {0}
        run: |
          cd MLProject
          echo "MLflow runs:"
          ls -la model_heart_disease_failure/ 2>/dev/null || echo "No model_heart_disease_failure directory found"

      # Save models to GitHub Repository
      - name: Save model to repo
        run: |
          git config --global user.name ${{ secrets.USERNAME }}
          git config --global user.email ${{ secrets.EMAIL }}
          cd MLProject
          git add ./model/*
          git add ./model_heart_disease_failure/*
          git commit -m "Save model from CI run"
          git push origin main || echo "No changes to commit, skipping push."

      # Get latest run_id
      - name: Get latest MLflow run_id via Python
        id: get_run_id
        shell: bash -l {0}
        run: |
          conda activate heart_disease_env
          cd MLProject
          python -c "
          import mlflow
          client = mlflow.tracking.MlflowClient()
          runs = client.search_runs(
              experiment_ids=[client.get_experiment_by_name('model_heart_disease_failure').experiment_id],
              order_by=['attributes.start_time DESC'],
              max_results=1
          )
          if runs:
              print(f'::set-output name=run_id::{runs[0].info.run_id}')
          else:
              print('No runs found.')
          "
      # verifikasi run id
      - name: Check RUN_ID
        run: |
          echo "RUN_ID=${{ steps.get_run_id.outputs.run_id }}" 

      # - name: Download model locally from DagsHub
      #   shell: bash -l {0}
      #   run: |
      #     mkdir -p ./model_local
      #     curl -L -u "$DAGSHUB_USERNAME:$DAGSHUB_TOKEN" \
      #       "https://dagshub.com/fahrimuda12/heart-disease.mlflow/artifacts/model_heart_disease_failure/${{ steps.get_run_id.outputs.run_id }}/artifacts/model" \
      #       --output ./model_local/model.tar.gz
      #     if file ./model_local/model.tar.gz | grep -q 'gzip compressed data'; then
      #       tar -xzvf ./model_local/model.tar.gz -C ./model_local
      #     else
      #       echo "Downloaded file is not a valid tar.gz archive."
      #       exit 1
      #     fi
      
      # Build Docker Model
      - name: Build Docker Model
        shell: bash -l {0}
        run: |
          cd MLProject
          mlflow models build-docker --model-uri ./model_heart_disease_failure --name heart_disease

      # Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Tag the Docker image
      - name: Tag Docker Image
        shell: bash -l {0}
        run: |
          docker tag heart_disease ${{ secrets.DOCKER_HUB_USERNAME }}/heart_disease:latest

      # Push Docker image to Docker Hub
      - name: Push Docker Image
        shell: bash -l {0}
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/heart_disease:latest